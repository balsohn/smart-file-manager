plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.smartfilemanager'
version = '1.0.0'
sourceCompatibility = '17'
targetCompatibility = '17'

// 인코딩 설정
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

// JavaFX 설정 - 버전을 명시하고 런타임 포함
javafx {
    version = '17.0.2'  // JDK 17과 호환되는 버전
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.base']
    configuration = 'implementation'  // 런타임에도 포함
}

repositories {
    mavenCentral()
}

dependencies {
    // JavaFX 런타임 의존성 명시적 추가 (모든 플랫폼 포함)
    implementation "org.openjfx:javafx-controls:17.0.2"
    implementation "org.openjfx:javafx-fxml:17.0.2"
    implementation "org.openjfx:javafx-graphics:17.0.2"
    implementation "org.openjfx:javafx-base:17.0.2"

    // 크로스 플랫폼 지원을 위한 네이티브 라이브러리들
    implementation "org.openjfx:javafx-controls:17.0.2:win"
    implementation "org.openjfx:javafx-fxml:17.0.2:win"
    implementation "org.openjfx:javafx-graphics:17.0.2:win"
    implementation "org.openjfx:javafx-base:17.0.2:win"
    
    implementation "org.openjfx:javafx-controls:17.0.2:linux"
    implementation "org.openjfx:javafx-fxml:17.0.2:linux"
    implementation "org.openjfx:javafx-graphics:17.0.2:linux"
    implementation "org.openjfx:javafx-base:17.0.2:linux"
    
    implementation "org.openjfx:javafx-controls:17.0.2:mac"
    implementation "org.openjfx:javafx-fxml:17.0.2:mac"
    implementation "org.openjfx:javafx-graphics:17.0.2:mac"
    implementation "org.openjfx:javafx-base:17.0.2:mac"

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // JSON 처리
    implementation 'com.google.code.gson:gson:2.10.1'

    // SQLite
    implementation 'org.xerial:sqlite-jdbc:3.44.1.0'

    // 로깅
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.14'

    // 테스트
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// 메인 애플리케이션 설정
application {
    mainClass = 'com.smartfilemanager.Launcher'
}

// 테스트 설정
test {
    useJUnitPlatform()
}

// 소스셋 설정
sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

// 🧪 통계 시스템 테스트 태스크 (JavaFX 수정)
task statisticsTest(type: JavaExec) {
    group = 'verification'
    description = '통계 시스템을 독립적으로 테스트합니다'

    dependsOn 'compileJava', 'compileTestJava'

    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.smartfilemanager.test.StatisticsSystemTest'

    // JavaFX 모듈 경로 설정
    def javafxModules = [
            'javafx.controls',
            'javafx.fxml',
            'javafx.graphics',
            'javafx.base'
    ]

    // JVM 인수 수정
    jvmArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', javafxModules.join(','),
            '-Dfile.encoding=UTF-8',
            '-Djava.awt.headless=false'
    ]

    systemProperties = [
            'test.mode': 'full',
            'test.data.size': '186'
    ]

    doFirst {
        println ""
        println "🧪 Smart File Manager - Statistics System Test"
        println "=" * 55
        println "🔧 JavaFX Runtime: Included via Gradle"
        println "📊 Testing statistics with ${systemProperties['test.data.size']} virtual files"
        println "🎯 Test window will open - check all tabs and features"
        println ""
    }

    doLast {
        println ""
        println "🎉 Statistics test completed!"
    }
}

// 빠른 통계 테스트
task quickStatsTest(type: JavaExec) {
    group = 'verification'
    description = '통계 시스템 빠른 검증 (소량 데이터)'

    dependsOn 'compileJava', 'compileTestJava'

    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.smartfilemanager.test.StatisticsSystemTest'

    jvmArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.graphics,javafx.base',
            '-Dfile.encoding=UTF-8'
    ]

    systemProperties = [
            'test.mode': 'quick',
            'test.data.size': '50'
    ]
}

// 통계 파일 검증 태스크
task verifyStatisticsFiles {
    group = 'verification'
    description = '통계 시스템 필수 파일 존재 확인'

    doLast {
        def requiredFiles = [
                'src/main/java/com/smartfilemanager/controller/StatisticsController.java',
                'src/main/resources/fxml/statistics.fxml',
                'src/main/resources/css/statistics-styles.css'
        ]

        def missing = []
        requiredFiles.each { file ->
            if (!project.file(file).exists()) {
                missing.add(file)
            }
        }

        if (missing.empty) {
            println "✅ All statistics system files exist"
        } else {
            println "⚠️  Some files missing (will use basic test):"
            missing.each { file ->
                println "   - $file"
            }
        }
    }
}

// 통계 테스트용 파일 생성
task createTestFile {
    group = 'build setup'
    description = '통계 테스트 파일을 자동 생성합니다'

    doLast {
        // 기존 문제가 있는 파일들 정리
        def utilDir = file('src/test/java/com/smartfilemanager/util')
        if (utilDir.exists()) {
            utilDir.deleteDir()
            println "🧹 Cleaned problematic util directory"
        }

        // 올바른 테스트 디렉토리 생성
        def testDir = file('src/test/java/com/smartfilemanager/test')
        testDir.mkdirs()

        def testFile = file('src/test/java/com/smartfilemanager/test/StatisticsSystemTest.java')

        // 기존 파일이 있다면 삭제하고 새로 생성
        if (testFile.exists()) {
            testFile.delete()
            println "🔄 Replaced existing test file"
        }

        // 깨끗한 테스트 파일 생성
        testFile.text = '''package com.smartfilemanager.test;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

/**
 * Clean Statistics System Test
 * Basic JavaFX test with proper runtime
 */
public class StatisticsSystemTest extends Application {

    @Override
    public void start(Stage primaryStage) {
        System.out.println("🚀 Statistics System Test Started!");
        
        VBox root = new VBox(15);
        root.getChildren().addAll(
            new Label("📊 Statistics System Test"),
            new Label("✅ JavaFX Runtime: Working"),
            new Label("✅ Gradle Build: Success"),
            new Label("✅ Oracle JDK 17: Compatible"),
            new Label(""),
            new Label("🎯 Environment Status:"),
            new Label("• JavaFX: " + System.getProperty("javafx.version", "17.0.2")),
            new Label("• Java: " + System.getProperty("java.version")),
            new Label("• OS: " + System.getProperty("os.name")),
            new Label(""),
            new Label("📝 Next Steps:"),
            new Label("1. Add StatisticsController"),
            new Label("2. Add FXML files"),
            new Label("3. Test complete features"),
            new Label(""),
            new Label("Close window to finish test")
        );
        
        root.setStyle("-fx-padding: 25; -fx-alignment: center; -fx-spacing: 8;");
        
        Scene scene = new Scene(root, 480, 400);
        primaryStage.setTitle("📊 Statistics Test - JavaFX Runtime OK");
        primaryStage.setScene(scene);
        primaryStage.setResizable(false);
        primaryStage.show();
        
        primaryStage.setOnCloseRequest(e -> {
            System.out.println("✅ Test completed successfully!");
            System.out.println("📊 JavaFX runtime is working correctly.");
        });
    }

    public static void main(String[] args) {
        System.out.println("Starting Statistics System Test...");
        System.out.println("Java Version: " + System.getProperty("java.version"));
        System.out.println("JavaFX Version: " + System.getProperty("javafx.version", "17.0.2"));
        launch(args);
    }
}'''

        println "✅ Created clean test file: $testFile"
        println "🎯 Ready for JavaFX testing!"
    }
}

// JavaFX 런타임 설정
run {
    jvmArgs = [
            '--module-path', sourceSets.main.runtimeClasspath.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.graphics,javafx.base'
    ]
}

// JAR 빌드 설정
jar {
    archiveBaseName = 'smart-file-manager'

    manifest {
        attributes(
                'Main-Class': 'com.smartfilemanager.Launcher',
                'Implementation-Version': version
        )
    }
}

// Shadow JAR 설정 (Fat JAR 생성)
shadowJar {
    archiveBaseName = 'Smart-File-Manager'
    archiveClassifier = ''
    archiveVersion = ''
    
    // 메인 클래스 설정
    manifest {
        attributes(
                'Main-Class': 'com.smartfilemanager.Launcher',
                'Implementation-Version': version,
                'Implementation-Title': 'Smart File Manager',
                'Implementation-Vendor': 'Smart File Manager Team'
        )
    }
    
    // 중복 파일 처리 전략
    mergeServiceFiles()
    
    // 제외할 파일들 (불필요한 파일 제거로 크기 최적화)
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/maven/**'
    // module-info.class는 JavaFX 모듈 로딩에 필요하므로 제외하지 않음
    
    // 최종 파일명: Smart-File-Manager.jar
    destinationDirectory = file("$buildDir/libs")
}

// 도움말 태스크
task helpStatistics {
    group = 'help'
    description = '통계 테스트 사용법 안내'

    doLast {
        println """
🧪 Statistics System Test Commands
${"=" * 40}

🔧 JavaFX Setup:
✅ Oracle JDK 17 with separate JavaFX runtime
✅ Gradle automatically downloads JavaFX 17.0.2
✅ Cross-platform compatibility

📊 Available Commands:

1. 기본 통계 테스트:
   ./gradlew statisticsTest
   → JavaFX 환경 확인 + 기본 UI 테스트

2. 빠른 검증:
   ./gradlew quickStatsTest  
   → 경량 테스트

3. 파일 확인:
   ./gradlew verifyStatisticsFiles
   → 필수 파일 확인

4. 테스트 파일 생성:
   ./gradlew createTestFile
   → 깨끗한 테스트 파일 생성

5. 전체 빌드:
   ./gradlew build
   → 프로젝트 컴파일

💡 Troubleshooting:
• JavaFX 오류 → Gradle이 자동으로 다운로드
• 모듈 경로 오류 → build.gradle이 자동 설정
• 런타임 오류 → JDK 17과 JavaFX 17 호환성 확인됨
        """
    }
}

// AI 분석 데모 실행 (수정된 버전)
task aiDemo(type: JavaExec) {
    group = 'demonstration'
    description = 'AI 파일 분석 데모를 실행합니다 (API 키 불필요)'

    dependsOn 'compileJava', 'compileTestJava'

    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.smartfilemanager.test.AIAnalysisDemo'

    // 통계 테스트와 동일한 JavaFX 설정 사용
    jvmArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.graphics,javafx.base',
            '-Dfile.encoding=UTF-8',
            '-Djava.awt.headless=false'
    ]

    doFirst {
        println ""
        println "🤖 AI Analysis Demo"
        println "=" * 40
        println "🔧 JavaFX: Same settings as statisticsTest"
        println "🎯 실제 API 키 없이 AI 분석 기능 체험"
        println "📝 다양한 파일명으로 테스트 가능"
        println ""
    }

    doLast {
        println ""
        println "🎉 AI 데모 완료!"
        println "실제 AI 기능을 사용하려면 OpenAI API 키가 필요합니다."
    }
}

// AI 데모 파일 생성
task createAIDemo {
    group = 'build setup'
    description = 'AI 분석 데모 파일을 생성합니다'

    doLast {
        def demoDir = file('src/test/java/com/smartfilemanager/test')
        demoDir.mkdirs()

        def demoFile = file('src/test/java/com/smartfilemanager/test/AIAnalysisDemo.java')
        if (demoFile.exists()) {
            println "ℹ️  AI 데모 파일이 이미 존재합니다: $demoFile"
        } else {
            // 여기에 위의 AIAnalysisDemo.java 내용을 넣으면 됩니다
            println "✅ AI 데모 파일을 수동으로 생성해주세요: $demoFile"
        }
    }
}

// 실시간 모니터링 테스트
task monitoringTest(type: JavaExec) {
    group = 'verification'
    description = '실시간 폴더 모니터링 기능을 테스트합니다'

    dependsOn 'compileJava', 'compileTestJava'

    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.smartfilemanager.test.MonitoringSystemTest'

    jvmArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.graphics,javafx.base',
            '-Dfile.encoding=UTF-8',
            '-Djava.awt.headless=false'
    ]

    systemProperties = [
            'test.mode': 'monitoring',
            'test.folder': System.getProperty("user.home") + "/Downloads"
    ]

    doFirst {
        println ""
        println "🔍 Smart File Manager - 실시간 모니터링 테스트"
        println "=" * 55
        println "📁 모니터링 폴더: ${systemProperties['test.folder']}"
        println "🎯 파일을 폴더에 추가하면 자동으로 감지됩니다"
        println "⚡ 자동 정리 기능도 함께 테스트됩니다"
        println ""
    }

    doLast {
        println ""
        println "🎉 모니터링 테스트 완료!"
        println "실제 사용 시에는 메인 애플리케이션의 모니터링 버튼을 사용하세요."
    }
}

// 모든 데모 실행
task runAllDemos {
    group = 'demonstration'
    description = '모든 데모를 순차적으로 실행합니다'

    dependsOn 'statisticsTest', 'aiDemo'

    doLast {
        println ""
        println "🎉 모든 데모 실행 완료!"
        println "1. 통계 시스템 테스트 ✅"
        println "2. AI 분석 데모 ✅"
    }
}

// 전체 애플리케이션 실행 (모니터링 포함)
task runApp(type: JavaExec) {
    group = 'application'
    description = '전체 애플리케이션을 실행합니다 (모니터링 기능 포함)'

    dependsOn 'compileJava'

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.smartfilemanager.SmartFileManagerApp'

    jvmArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.graphics,javafx.base',
            '-Dfile.encoding=UTF-8'
    ]

    doFirst {
        println ""
        println "🚀 Smart File Manager 실행"
        println "=" * 40
        println "✅ 실시간 모니터링 기능 포함"
        println "✅ 통계 시스템 포함"
        println "✅ AI 분석 데모 포함"
        println ""
    }
}

// 클린업
clean {
    delete 'build'
    delete '.gradle'
}

// ===============================
// 배포용 태스크들
// ===============================

// Fat JAR 빌드 (메인 태스크)
task buildExecutableJar {
    group = 'distribution'
    description = '실행 가능한 Fat JAR 파일을 생성합니다'
    
    dependsOn shadowJar
    
    doLast {
        def jarFile = file("$buildDir/libs/Smart-File-Manager.jar")
        if (jarFile.exists()) {
            println ""
            println "🎉 실행 가능한 JAR 파일이 생성되었습니다!"
            println "📁 위치: ${jarFile.absolutePath}"
            println "📏 크기: ${jarFile.length() / (1024 * 1024)} MB"
            println ""
            println "🚀 실행 방법:"
            println "1. 더블클릭으로 실행"
            println "2. 또는 명령어: java -jar Smart-File-Manager.jar"
            println ""
        } else {
            println "❌ JAR 파일 생성에 실패했습니다."
        }
    }
}

// 실행 스크립트 생성
task createRunScripts {
    group = 'distribution'
    description = '실행 보조 스크립트를 생성합니다'
    
    dependsOn shadowJar
    
    doLast {
        // Windows 배치 파일 생성
        def batFile = file("$buildDir/libs/run.bat")
        batFile.text = '''@echo off
echo Smart File Manager 실행 중...
echo.

:: Java 설치 확인
java -version >nul 2>&1
if %errorlevel% neq 0 (
    echo ❌ Java가 설치되지 않았습니다.
    echo.
    echo Java 17 이상을 설치해주세요:
    echo https://adoptium.net/
    echo.
    pause
    exit /b 1
)

:: JAR 파일 존재 확인
if not exist "Smart-File-Manager.jar" (
    echo ❌ Smart-File-Manager.jar 파일을 찾을 수 없습니다.
    echo.
    pause
    exit /b 1
)

:: 실행
echo ✅ Smart File Manager 시작...
java -jar Smart-File-Manager.jar

if %errorlevel% neq 0 (
    echo.
    echo ❌ 실행 중 오류가 발생했습니다.
    echo Java 버전을 확인해주세요 (Java 17 이상 필요)
    echo.
    pause
)
'''

        // Linux/Mac 쉘 스크립트 생성
        def shFile = file("$buildDir/libs/run.sh")
        shFile.text = '''#!/bin/bash

echo "Smart File Manager 실행 중..."
echo

# Java 설치 확인
if ! command -v java &> /dev/null; then
    echo "❌ Java가 설치되지 않았습니다."
    echo
    echo "Java 17 이상을 설치해주세요:"
    echo "https://adoptium.net/"
    echo
    read -p "계속하려면 Enter를 누르세요..."
    exit 1
fi

# JAR 파일 존재 확인
if [ ! -f "Smart-File-Manager.jar" ]; then
    echo "❌ Smart-File-Manager.jar 파일을 찾을 수 없습니다."
    echo
    read -p "계속하려면 Enter를 누르세요..."
    exit 1
fi

# 실행
echo "✅ Smart File Manager 시작..."
java -jar Smart-File-Manager.jar

if [ $? -ne 0 ]; then
    echo
    echo "❌ 실행 중 오류가 발생했습니다."
    echo "Java 버전을 확인해주세요 (Java 17 이상 필요)"
    echo
    read -p "계속하려면 Enter를 누르세요..."
fi
'''
        
        // 실행 권한 부여 (Linux/Mac)
        if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
            shFile.setExecutable(true)
        }
        
        println "✅ 실행 스크립트가 생성되었습니다:"
        println "   - ${batFile.absolutePath} (Windows용)"
        println "   - ${shFile.absolutePath} (Linux/Mac용)"
    }
}

// README 파일 생성
task createReadme {
    group = 'distribution'
    description = '실행 안내 README 파일을 생성합니다'
    
    doLast {
        def readmeFile = file("$buildDir/libs/README.txt")
        readmeFile.text = '''🗂️ Smart File Manager - 실행 안내
========================================

📋 시스템 요구사항:
• Java 17 이상 설치 필요
• Windows 10/11, macOS 10.14+, Ubuntu 18.04+ 지원
• 최소 4GB RAM, 100MB 디스크 공간

🚀 실행 방법:

방법 1: 더블클릭 실행 (가장 간단)
• Smart-File-Manager.jar 파일을 더블클릭

방법 2: 실행 스크립트 사용
• Windows: run.bat 더블클릭
• Linux/Mac: 터미널에서 ./run.sh 실행

방법 3: 명령줄 실행
• 터미널/명령 프롬프트에서:
  java -jar Smart-File-Manager.jar

🔧 문제 해결:

Q: 더블클릭해도 실행되지 않아요
A: Java가 설치되어 있는지 확인하세요
   https://adoptium.net/ 에서 다운로드

Q: "모듈을 찾을 수 없습니다" 오류
A: Java 11 이상이 설치되어 있는지 확인하세요

Q: 한글이 깨져 보여요
A: 시스템 언어 설정을 확인하거나 
   실행 시 -Dfile.encoding=UTF-8 옵션 추가

📞 지원:
• GitHub: https://github.com/balsohn/smart-file-manager
• 문제 신고: GitHub Issues 탭 이용

© 2024 Smart File Manager Team
'''
        
        println "✅ README 파일이 생성되었습니다: ${readmeFile.absolutePath}"
    }
}

// 전체 배포 패키지 생성
task createDistribution {
    group = 'distribution'
    description = '완전한 배포 패키지를 생성합니다'
    
    dependsOn buildExecutableJar, createRunScripts, createReadme
    
    doLast {
        println ""
        println "🎉 배포 패키지 생성 완료!"
        println "📁 위치: $buildDir/libs/"
        println ""
        println "📦 포함된 파일들:"
        println "• Smart-File-Manager.jar - 메인 실행 파일"
        println "• run.bat - Windows 실행 스크립트"
        println "• run.sh - Linux/Mac 실행 스크립트"  
        println "• README.txt - 실행 안내서"
        println ""
        println "🚀 이제 libs 폴더를 압축해서 배포하세요!"
    }
}

// ===============================
// 네이티브 배포 태스크들 (jpackage)
// ===============================

// Windows EXE 파일 생성
task createWindowsExe {
    group = 'distribution'
    description = 'Windows EXE 실행 파일을 생성합니다'
    
    dependsOn shadowJar
    
    doLast {
        def jpackageCmd = [
            '"C:\\Program Files\\Java\\jdk-17\\bin\\jpackage.exe"',
            '--input', '"' + file("$buildDir/libs").absolutePath + '"',
            '--main-jar', 'Smart-File-Manager.jar',
            '--main-class', 'com.smartfilemanager.Launcher',
            '--name', 'SmartFileManager',
            '--app-version', version,
            '--description', '"AI 기반 스마트 파일 정리 도구"',
            '--vendor', '"Smart File Manager Team"',
            '--copyright', '"© 2024 Smart File Manager Team"',
            '--icon', '"' + file('src/main/resources/app_icon.ico').absolutePath + '"',
            '--dest', '"' + file("$buildDir/exe").absolutePath + '"',
            '--type', 'app-image'
        ]
        
        println "🔧 Windows EXE 파일 생성 중..."
        println "명령어: " + jpackageCmd.join(' ')
        
        def result = exec {
            commandLine 'cmd', '/c', jpackageCmd.join(' ')
            ignoreExitValue = true
        }
        
        if (result.exitValue == 0) {
            println "✅ Windows EXE 파일이 생성되었습니다!"
            println "📁 위치: $buildDir/exe/"
        } else {
            println "❌ EXE 파일 생성에 실패했습니다."
        }
    }
}

// Windows MSI 설치 파일 생성
task createWindowsMsi {
    group = 'distribution'
    description = 'Windows MSI 설치 파일을 생성합니다'
    
    dependsOn shadowJar
    
    doLast {
        def jpackageCmd = [
            '"C:\\Program Files\\Java\\jdk-17\\bin\\jpackage.exe"',
            '--app-image', '"' + file("$buildDir/exe/SmartFileManager").absolutePath + '"',
            '--name', 'SmartFileManager',
            '--app-version', version,
            '--description', '"AI 기반 스마트 파일 정리 도구"',
            '--vendor', '"Smart File Manager Team"',
            '--copyright', '"© 2024 Smart File Manager Team"',
            '--dest', '"' + file("$buildDir/msi").absolutePath + '"',
            '--type', 'msi',
            '--win-shortcut',
            '--win-menu',
            '--win-dir-chooser'
        ]
        
        println "🔧 Windows MSI 설치 파일 생성 중..."
        println "명령어: " + jpackageCmd.join(' ')
        
        def result = exec {
            commandLine 'cmd', '/c', jpackageCmd.join(' ')
            ignoreExitValue = true
        }
        
        if (result.exitValue == 0) {
            println "✅ Windows MSI 설치 파일이 생성되었습니다!"
            println "📁 위치: $buildDir/msi/"
        } else {
            println "❌ MSI 파일 생성에 실패했습니다."
        }
    }
}

// 모든 배포 파일 생성
task createAllDistributions {
    group = 'distribution'
    description = '모든 배포 파일을 생성합니다 (JAR, EXE, MSI)'
    
    dependsOn createDistribution, createWindowsExe, createWindowsMsi
    
    doLast {
        println ""
        println "🎉 모든 배포 파일 생성 완료!"
        println ""
        println "📦 생성된 파일들:"
        println "1. JAR 파일: $buildDir/libs/Smart-File-Manager.jar"
        println "2. EXE 파일: $buildDir/exe/"
        println "3. MSI 설치 파일: $buildDir/msi/"
        println ""
        println "🚀 배포 준비 완료!"
    }
}